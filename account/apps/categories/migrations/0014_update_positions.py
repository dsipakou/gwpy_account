# Generated by Django 4.2.11 on 2025-03-11 18:17

from django.db import migrations, models


def assign_unique_positions(apps, schema_editor):
    """
    Assigns unique position values to categories under each parent.
    """
    Category = apps.get_model("categories", "Category")
    # Get all unique parent values (including None for top-level)
    top_level_categories = Category.objects.filter(parent__isnull=True)

    for parent in top_level_categories:
        # Filter categories by parent, order by some criteria (e.g., created_at or uuid)
        subcategories = Category.objects.filter(parent=parent).order_by("created_at")
        # Assign sequential positions starting from 1
        for index, subcategory in enumerate(subcategories, start=1):
            if subcategory.position != index:
                subcategory.position = index
                subcategory.save()


def reverse_assign_positions(apps, schema_editor):
    """
    Optional: Reverts positions to 0 (or another default) if migration is rolled back.
    """
    Category = apps.get_model("categories", "Category")
    Category.objects.all().update(position=0)


class Migration(migrations.Migration):

    dependencies = [
        ("categories", "0013_alter_category_options_and_more"),
    ]

    operations = [
        # Run the data migration to update positions
        migrations.RunPython(
            code=assign_unique_positions,
            reverse_code=reverse_assign_positions,
        ),
        # Add the unique constraint (if not already applied)
        migrations.AddConstraint(
            model_name="category",
            constraint=models.UniqueConstraint(
                fields=["parent", "position"], name="unique_position_per_parent"
            ),
        ),
    ]
