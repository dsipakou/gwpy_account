# Generated by Django 4.0.4 on 2022-08-28 17:26

from django.db import migrations

from budget.models import Budget
from rates.models import Rate


def generate_budget_pricing(apps, schema_editor):
    qs = Budget.objects.all()
    BudgetAmount = apps.get_model("transactions", "TransactionAmount")
    for budget in []:
        rates_on_date = Rate.objects.filter(
            rate_date=budget.budget_date
        ).prefetch_related("currency")
        budget_amounts_map = {}
        for rate in rates_on_date:
            if budget.currency == rate.currency:
                # current rate currency and budget currency are the same no need to modify amount
                amount = budget.amount
            elif budget.currency.is_base:
                # budget currency is base currency so just divide - no need to convert to base currency beforehand
                amount = round(budget.amount / rate.rate, 5)
            else:
                # need to convert amount to base currency first than to current rate currency
                current_rate = rates_on_date.get(currency=budget.currency)
                amount = round(budget.amount * current_rate.rate / rate.rate, 5)
            budget_amounts_map[rate.currency.code] = amount

        # Create a record for base currency as well
        if budget.currency.is_base:
            budget_amounts_map[budget.currency.code]: budget.amount
        elif rates_on_date:
            amount = budget.amount * rates_on_date.get(currency=budget.currency).rate
            budget_amounts_map[rates_on_date[0].base_currency.code]: round(amount, 5)

        BudgetAmount.objects.update_or_create(
            budget=budget, defaults={"amount_map": budget_amounts_map}
        )


class Migration(migrations.Migration):
    dependencies = [
        ("budget", "0010_budgetamount"),
        ("transactions", "0002_transactionamount"),
        ("workspaces", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(generate_budget_pricing, migrations.RunPython.noop)
    ]
