# Generated by Django 4.0.4 on 2022-08-28 19:45

from django.db import migrations
from rates.models import Rate
from transactions.models import Transaction


def generate_transaction_pricing(apps, schema_editor):
    qs = Transaction.objects.all()
    TransactionAmount = apps.get_model("transactions", "TransactionAmount")
    counter = 1
    for transaction in qs:
        rates_on_date = Rate.objects.filter(
            rate_date=transaction.transaction_date
        ).prefetch_related("currency")
        amount_mapping = dict()
        for rate in rates_on_date:
            if transaction.currency == rate.currency:
                # current rate currency and transaction currency are the same no need to modify amount
                amount = transaction.amount
            elif transaction.currency.is_base:
                # transaction currency is base currency so just divide - no need to convert to base currency beforehand
                amount = round(transaction.amount / rate.rate, 5)
            else:
                # need to convert amount to base currency first than to current rate currency
                current_rate = rates_on_date.get(currency=transaction.currency)
                amount = round(transaction.amount * current_rate.rate / rate.rate, 5)
            amount_mapping[rate.currency.code] = amount
        # Create a record for base currency as well
        if transaction.currency.is_base:
            amount_mapping[transaction.currency.code] = transaction.amount
        elif rates_on_date:
            amount = (
                transaction.amount
                * rates_on_date.get(currency=transaction.currency).rate
            )
            amount_mapping[rates_on_date[0].base_currency.code] = round(amount, 5)
        if counter % 1000 == 0:
            print(f"{counter} of {qs.count()} migrated")
        counter += 1
        TransactionAmount.objects.update_or_create(
            transaction=transaction, defaults={"amount_map": amount_mapping}
        )


class Migration(migrations.Migration):

    dependencies = [
        ("transactions", "0002_transactionamount"),
    ]

    operations = [
        migrations.RunPython(generate_transaction_pricing, migrations.RunPython.noop)
    ]
